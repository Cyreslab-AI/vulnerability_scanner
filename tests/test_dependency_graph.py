import unittest
from unittest.mock import patch, MagicMock
import networkx as nx
from vulnerability_scanner.advanced_vulnerability_scanner import VulnerabilityScanner

class TestDependencyGraph(unittest.TestCase):
    def setUp(self):
        self.config = {
            'dependencies_file': 'test_dependencies.json',
            'ecosystem': 'PyPI',
            'output_format': 'text',
            'min_severity': 'LOW'
        }
        self.scanner = VulnerabilityScanner(self.config)

    def test_analyze_dependency_graph(self):
        # Mock dependencies
        self.scanner.dependencies = {
            'package1': {'version': '1.0.0', 'dependencies': {'package2': '2.0.0'}},
            'package2': {'version': '2.0.0', 'dependencies': {}}
        }

        self.scanner.analyze_dependency_graph()

        # Check if the graph has the correct number of nodes and edges
        self.assertEqual(len(self.scanner.dependency_graph.nodes), 2)
        self.assertEqual(len(self.scanner.dependency_graph.edges), 1)

        # Check if the graph contains the correct nodes
        self.assertIn('package1', self.scanner.dependency_graph.nodes)
        self.assertIn('package2', self.scanner.dependency_graph.nodes)

        # Check if the edge direction is correct
        self.assertTrue(self.scanner.dependency_graph.has_edge('package1', 'package2'))

    @patch('matplotlib.pyplot.savefig')
    def test_dependency_graph_visualization(self, mock_savefig):
        # Mock dependencies
        self.scanner.dependencies = {
            'package1': {'version': '1.0.0', 'dependencies': {'package2': '2.0.0'}},
            'package2': {'version': '2.0.0', 'dependencies': {}}
        }

        self.scanner.analyze_dependency_graph()

        # Check if savefig was called (graph was saved)
        mock_savefig.assert_called_once_with("dependency_graph.png")

if __name__ == '__main__':
    unittest.main()